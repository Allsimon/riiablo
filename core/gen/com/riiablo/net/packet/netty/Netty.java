// automatically generated by the FlatBuffers compiler, do not modify

package com.riiablo.net.packet.netty;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Netty extends Table {
  public static Netty getRootAsNetty(ByteBuffer _bb) { return getRootAsNetty(_bb, new Netty()); }
  public static Netty getRootAsNetty(ByteBuffer _bb, Netty obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public Netty __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Header header() { return header(new Header()); }
  public Header header(Header obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public byte dataType() { int o = __offset(6); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public Table data(Table obj) { int o = __offset(8); return o != 0 ? __union(obj, o) : null; }

  public static int createNetty(FlatBufferBuilder builder,
      int headerOffset,
      byte data_type,
      int dataOffset) {
    builder.startObject(3);
    Netty.addData(builder, dataOffset);
    Netty.addHeader(builder, headerOffset);
    Netty.addDataType(builder, data_type);
    return Netty.endNetty(builder);
  }

  public static void startNetty(FlatBufferBuilder builder) { builder.startObject(3); }
  public static void addHeader(FlatBufferBuilder builder, int headerOffset) { builder.addOffset(0, headerOffset, 0); }
  public static void addDataType(FlatBufferBuilder builder, byte dataType) { builder.addByte(1, dataType, 0); }
  public static void addData(FlatBufferBuilder builder, int dataOffset) { builder.addOffset(2, dataOffset, 0); }
  public static int endNetty(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
  public static void finishNettyBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedNettyBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }
}

