// automatically generated by the FlatBuffers compiler, do not modify

package com.riiablo.net.packet.netty;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Header extends Table {
  public static Header getRootAsHeader(ByteBuffer _bb) { return getRootAsHeader(_bb, new Header()); }
  public static Header getRootAsHeader(ByteBuffer _bb, Header obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public Header __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int sequence() { int o = __offset(4); return o != 0 ? bb.getShort(o + bb_pos) & 0xFFFF : 0; }
  public int ack() { int o = __offset(6); return o != 0 ? bb.getShort(o + bb_pos) & 0xFFFF : 0; }
  public int ackBits() { int o = __offset(8); return o != 0 ? bb.getInt(o + bb_pos) : 0; }

  public static int createHeader(FlatBufferBuilder builder,
      int sequence,
      int ack,
      int ack_bits) {
    builder.startObject(3);
    Header.addAckBits(builder, ack_bits);
    Header.addAck(builder, ack);
    Header.addSequence(builder, sequence);
    return Header.endHeader(builder);
  }

  public static void startHeader(FlatBufferBuilder builder) { builder.startObject(3); }
  public static void addSequence(FlatBufferBuilder builder, int sequence) { builder.addShort(0, (short)sequence, (short)0); }
  public static void addAck(FlatBufferBuilder builder, int ack) { builder.addShort(1, (short)ack, (short)0); }
  public static void addAckBits(FlatBufferBuilder builder, int ackBits) { builder.addInt(2, ackBits, 0); }
  public static int endHeader(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

